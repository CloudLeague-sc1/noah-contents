{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/RichText.svelte","../../src/MultilingualRichText.svelte","../../src/Summary.svelte","../../src/MultilingualText.svelte","../../src/PageComponents/Text.svelte","../../src/PageComponents/Annotation.svelte","../../src/PageComponents/References.svelte","../../src/PageComponents/Media.svelte","../../src/Page.svelte","../../src/QuizComponents/MultipleChoice.svelte","../../src/Quiz.svelte","../../src/Lesson.svelte","../../src/Cource.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script>\n export let text;\n</script>\n\n<span>\n {#each text as item}\n  {#if typeof item=='string'}\n   <span> {item}</span>\n  {:else if item.kind!==undefined}\n  {#if item.kind=='em'}\n  <span class=\"has-text-success\"><svelte:self text={item.inner}/></span>\n  {:else if item.kind=='bold'}\n  <span class=\"has-text-weight-bold\"><svelte:self text={item.inner}/></span>\n  {:else if item.kind=='italic'}\n  <span class=\"is-italic\"><svelte:self text={item.inner}/></span>\n  {:else if item.kind=='u'}\n  <span class=\"is-underlined\"><svelte:self text={item.inner}/></span>\n  {:else if item.kind=='s'}\n  <s><svelte:self text={item.inner}/></s>\n  {/if}\n  {:else}\n   <span class=\"has-text-danger\">UNKNOWN CONTENT</span>\n  {/if}\n\n {/each}\n\n</span>\n","<script>\n import RichText from './RichText.svelte';\n export let text;\n</script>\n\n<RichText text={text.ja} />\n","<script>\nimport MultilingualRichText from \"./MultilingualRichText.svelte\";\n\n export let summary;\n</script>\n\n<section class=\"column has-background-light p-3\">\n <div class=\"content\">\n <h3 class=\"has-text-success\"> Summary </h3>\n <ul class=\"p-3\">\n  {#each summary as item}\n  <li> <MultilingualRichText text={item}/></li>\n  {/each}\n </ul>\n</div>\n</section>\n\n\n","<script>\n export let text;\n</script>\n\n<span>{text['ja']} </span>\n","<script>\n import MultilingualRichText from \"../MultilingualRichText.svelte\";\n export let text;\n</script>\n\n<p> <MultilingualRichText text={text} /></p>\n","<script>\n import MultilingualRichText from \"../MultilingualRichText.svelte\";\n export let annotation;\n\n let annotationStyle= annotation.type=='warn'?'has-background-warning has-text-black-bis':' has-background-light';\n</script>\n\n<div class=\"column  {annotationStyle}\">\n    <MultilingualRichText text={annotation.text}/>\n</div>\n","\n<script>\n export let references;\n</script>\n<div class=\"content references\">\n <div class=\"column\">\n  {#each references as reference}\n  <li>\n   {#if reference.type==='web'}\n   <a href=\"{reference.url}\">{reference.title}</a>\n   {:else}\n   <span class=\"has-text-danger\">UNKNOWN TYPE REFERENCE</span>\n   {/if}\n  </li>\n  {/each}\n  </div>\n</div>\n\n<style scoped>\n .references{\n  border: 2px solid #086788;\n  padding:10px;\n  border-radius: 10px;\n }\n</style>\n","<script>\n export let media;\n</script>\n\n {#if media.type=='youtube'}\n <div class=\"column\">\n <iframe class=\"mr-auto ml-auto mt-5\" width=\"80%\" src=\"https://www.youtube.com/embed/{media.videoid}\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n </div>\n\n {:else if media.type=='image'}\n  <div class=\"column\">\n   <img src=\"generated/media/{media.src}\" class=\"mr-auto ml-auto\" width=\"80%\" alt=\"Inserted\" /> \n  </div>\n\n   {:else if media.type=='audio'}\n   <div class=\"column\">\n   <audio controls>\n    <source src=\"generated/media/{media.src}\">\n  </audio>\n  </div>\n\n {/if}\n\n","\n<script>\n import Text from './PageComponents/Text.svelte';\n import Annotation from './PageComponents/Annotation.svelte'\nimport References from './PageComponents/References.svelte';\nimport Media from './PageComponents/Media.svelte';\n export let page;\n</script>\n<section>\n <div class=\"row\">\n  <div class=\"column\">\n   <Text text={page.text} />\n  </div>\n</div>\n\n{#if page.media!==undefined}\n<div class=\"row\">\n   <Media media={page.media} />\n</div>\n{/if}\n\n{#if page.annotation!==undefined}\n<div class=\"row\">\n   <Annotation annotation={page.annotation} />\n</div>\n{/if}\n\n{#if page.references!==undefined}\n<div class=\"row\">\n   <References references={page.references} />\n</div>\n{/if}\n\n</section>\n","<script>\n import MultilingualRichText from \"../MultilingualRichText.svelte\";\n import MultilingualText from \"../MultilingualText.svelte\";\n export let quiz;\n\n let comment = null;\n let commentContainerStyle = \"\";\n\n const onClickOption=(option)=>{\n     console.log(\"clicked\");\n     comment = option.comment;\n\n     if(option.correct ){\n      commentContainerStyle = \"has-text-success\"\n     }else{\n      commentContainerStyle = \"has-text-danger\"\n     }\n };\n</script>\n<div class=\"row m-6\">\n<div class=\"row\">\n  <p class=\"is-size-5\"><span class=\"has-text-success\">Q.</span> <MultilingualRichText text={quiz.question}/></p>\n</div>\n<div class=\"columns is-centered m-4\">\n <div class=\"column is-half\">\n {#each quiz.options as option}\n <button class=\"button is-primary is-light is-fullwidth\" on:click={onClickOption(option)}><MultilingualText text={option.label}/></button>\n {/each}\n </div>\n</div>\n{#if comment!==null}\n<div class=\"row comment has-background-light {commentContainerStyle}\">\n <MultilingualRichText text={comment}/>\n</div>\n{/if}\n</div>\n\n<style scoped>\n .comment{\n  padding: 10px;\n}\n\n</style>\n","\n<script>\n import MultipleChoice from \"./QuizComponents/MultipleChoice.svelte\";\n export let quiz;\n</script>\n<section>\n <div class=\"row\">\n  {#if quiz.quiz_type=='multiple_choice'}\n   <MultipleChoice quiz={quiz}/>\n  {:else}\n  <span class=\"has-text-danger\">UNKNOWN QUIZ TYPE</span>\n  {/if}\n </div>\n</section>\n","<script>\nimport Summary from \"./Summary.svelte\";\n\nimport MultilingualText from \"./MultilingualText.svelte\";\n\n import RichText from \"./RichText.svelte\";\n import Page from './Page.svelte';\n import Quiz from './Quiz.svelte';\n export let lesson;\n \n</script>\n\n<section class=\"column content\">\n <h4><MultilingualText text={lesson.title}/></h4>\n\n <section class=\"columns pagesbox\">\n {#each lesson.pages as page}\n <section class=\"column is-4 pagebox\">\n  {#if page.type==\"page\"}\n <Page page={page}/>\n  {/if}\n  {#if page.type==\"quiz\"}\n   <Quiz quiz={page}/>\n   {/if}\n  </section>\n  {/each}\n  <section class=\"column is-4 pagebox\">\n  <Summary summary={lesson.summary}/>\n</section>\n</section>\n</section>\n\n\n<style scoped>\n\n  .pagesbox{\n    overflow-x: scroll;\n  }\n.pagebox {\n  padding: 1rem;\n  margin: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n</style>\n","\n<script>\n import Lesson from './Lesson.svelte';\nimport MultilingualText from './MultilingualText.svelte';\n export let courceWithMetadata;\n let {cource,meta:{source}}=courceWithMetadata;\n</script>\n<section class=\"column content mb-6\">\n <h3><MultilingualText text={cource.title}/></h3>\n <h6>Source: <code>{source}</code></h6>\n <div class=\"row\">\n  {#each cource.lessons as lesson}\n   <Lesson lesson={lesson}/>\n  {/each}\n</div>\n</section>\n","<script lang=\"ts\">\n\timport Cource from './Cource.svelte';\n\n\ttype Toc={articles:string[],samples:string[]};\n\n const fetchCources = async()=>{\n\t\tconst toc : Toc= await (await fetch('generated/toc.json')).json();\n\t\t\n\t\tlet cources = [];\n\t\t\n\t\tfor (const docName of toc.articles){\n\t\t\tconst articleJson = await (await fetch(`generated/${docName}`)).json();\n\t\t\tcources = cources.concat(articleJson);\n\t\t}\n\n\t\tlet sampleCources = [];\n\t\t\n\t\tfor (const docName of toc.samples){\n\t\t\tconst sampleJson = await (await fetch(`generated/${docName}`)).json();\n\t\t\tsampleCources = sampleCources.concat(sampleJson);\n\t\t}\n\n\t\treturn {cources,sampleCources};\n};\n\n</script>\n\n<section class=\"section\">\n\t<div class=\"container\">\n\t\t\t<h1 class=\"title has-text-info\">Contents Preview</h1>\n\t{#await fetchCources()}\n\t<p>...waiting</p>\n\t{:then {cources,sampleCources}}\n\t{#each cources as cource}\n\t<div class=\"row\">\n\t\t<Cource courceWithMetadata = {cource}/>\n\t\t<hr/>\n\t</div>\n {/each}\n\n\t{#each sampleCources as sampleCource}\n\t<div class=\"row\">\n\t\t<Cource courceWithMetadata = {sampleCource}/>\n\t\t<hr/>\n\t</div>\n {/each}\n\n\t{:catch error}\n\t <p>An error occurred!</p>\n\t{/await}\n\t</div>\n</section>\n","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","text","data","createTextNode","space","empty","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","handle_promise","promise","info","token","type","index","key","resolved","child_ctx","undefined","slice","current","needs_flush","blocks","m","mount","then","error","catch","hasCatch","pending","create_component","mount_component","customElement","on_mount","on_destroy","new_on_destroy","map","filter","destroy_component","make_dirty","fill","init","options","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","indexOf","splice","$set","$$props","obj","$$set","keys","span","kind","t","t_value","richtext","RichText","inner","s","richtext_changes","each_blocks","ja","li","section","div","h3","ul","summary","multilingualrichtext_changes","annotation","annotationStyle","title","a_href_value","create_if_block","div1","div0","references","source","src","source_src_value","audio","img","img_src_value","iframe","iframe_src_value","videoid","create_if_block_1","create_if_block_2","media","Media","media_changes","annotation_changes","references_changes","text_1","Text","text_1_changes","page","multilingualtext","MultilingualText","label","event","handler","button","apply","arguments","addEventListener","removeEventListener","multilingualtext_changes","question","each_value","if_block","div3","div2","quiz","comment","commentContainerStyle","option","console","log","correct","$$invalidate","quiz_type","pages","section2","h4","section1","section0","summary_changes","lesson","lessons","h6","code","courceWithMetadata","cource","meta","each_blocks_1","hr","h1","async","toc","fetch","json","cources","docName","articles","articleJson","concat","sampleCources","samples","sampleJson","body"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAEhF,IAAIE,EA84BAC,EA74BJ,SAASC,EAAcC,EAAaC,GAKhC,OAJKJ,IACDA,EAAuBK,SAASC,cAAc,MAElDN,EAAqBO,KAAOH,EACrBD,IAAgBH,EAAqBO,KA8QhD,SAASC,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAoDvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAUxC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAEhC,SAASQ,EAAaC,EAAYC,GAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,GAAK,EACpCF,EAAWE,IACXF,EAAWE,GAAGE,EAAEH,GAG5B,SAASI,EAAQC,GACb,OAAOpB,SAASC,cAAcmB,GAoBlC,SAASC,EAAKC,GACV,OAAOtB,SAASuB,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAEhB,SAASI,IACL,OAAOJ,EAAK,IAkChB,SAASK,EAAKrB,EAAMsB,EAAWC,GACd,MAATA,EACAvB,EAAKwB,gBAAgBF,GAChBtB,EAAKyB,aAAaH,KAAeC,GACtCvB,EAAK0B,aAAaJ,EAAWC,GAqLrC,SAASI,EAASX,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKY,YAAcX,IACnBD,EAAKC,KAAOA,GAwTpB,SAASY,EAAsBC,GAC3BvC,EAAoBuC,EAExB,SAASC,IACL,IAAKxC,EACD,MAAM,IAAIyC,MAAM,oDACpB,OAAOzC,EAmDX,MAAM0C,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoB/D,GACzByD,EAAiBO,KAAKhE,GAuB1B,MAAMiE,EAAiB,IAAIC,IAC3B,IAAIC,EAAW,EACf,SAASC,IACL,MAAMC,EAAkBxD,EACxB,EAAG,CAGC,KAAOsD,EAAWZ,EAAiBrB,QAAQ,CACvC,MAAMkB,EAAYG,EAAiBY,GACnCA,IACAhB,EAAsBC,GACtBkB,EAAOlB,EAAUmB,IAKrB,IAHApB,EAAsB,MACtBI,EAAiBrB,OAAS,EAC1BiC,EAAW,EACJX,EAAkBtB,QACrBsB,EAAkBgB,KAAlBhB,GAIJ,IAAK,IAAIvB,EAAI,EAAGA,EAAIwB,EAAiBvB,OAAQD,GAAK,EAAG,CACjD,MAAMwC,EAAWhB,EAAiBxB,GAC7BgC,EAAeS,IAAID,KAEpBR,EAAeU,IAAIF,GACnBA,KAGRhB,EAAiBvB,OAAS,QACrBqB,EAAiBrB,QAC1B,KAAOwB,EAAgBxB,QACnBwB,EAAgBc,KAAhBd,GAEJI,GAAmB,EACnBG,EAAeW,QACfzB,EAAsBkB,GAE1B,SAASC,EAAOC,GACZ,GAAoB,OAAhBA,EAAGM,SAAmB,CACtBN,EAAGD,SACHlE,EAAQmE,EAAGO,eACX,MAAMC,EAAQR,EAAGQ,MACjBR,EAAGQ,MAAQ,EAAE,GACbR,EAAGM,UAAYN,EAAGM,SAASG,EAAET,EAAGU,IAAKF,GACrCR,EAAGW,aAAa5E,QAAQyD,IAiBhC,MAAMoB,EAAW,IAAIjB,IACrB,IAAIkB,EACJ,SAASC,IACLD,EAAS,CACLE,EAAG,EACHC,EAAG,GACHP,EAAGI,GAGX,SAASI,IACAJ,EAAOE,GACRlF,EAAQgF,EAAOG,GAEnBH,EAASA,EAAOJ,EAEpB,SAASS,EAAcC,EAAOC,GACtBD,GAASA,EAAMzD,IACfkD,EAASS,OAAOF,GAChBA,EAAMzD,EAAE0D,IAGhB,SAASE,EAAeH,EAAOC,EAAOhE,EAAQ8C,GAC1C,GAAIiB,GAASA,EAAMI,EAAG,CAClB,GAAIX,EAAST,IAAIgB,GACb,OACJP,EAASR,IAAIe,GACbN,EAAOG,EAAEvB,MAAK,KACVmB,EAASS,OAAOF,GACZjB,IACI9C,GACA+D,EAAMvD,EAAE,GACZsC,QAGRiB,EAAMI,EAAEH,IAqOhB,SAASI,EAAeC,EAASC,GAC7B,MAAMC,EAAQD,EAAKC,MAAQ,GAC3B,SAAS5B,EAAO6B,EAAMC,EAAOC,EAAKxD,GAC9B,GAAIoD,EAAKC,QAAUA,EACf,OACJD,EAAKK,SAAWzD,EAChB,IAAI0D,EAAYN,EAAKhB,SACTuB,IAARH,IACAE,EAAYA,EAAUE,QACtBF,EAAUF,GAAOxD,GAErB,MAAM6C,EAAQS,IAASF,EAAKS,QAAUP,GAAMI,GAC5C,IAAII,GAAc,EACdV,EAAKP,QACDO,EAAKW,OACLX,EAAKW,OAAOtG,SAAQ,CAACoF,EAAOzD,KACpBA,IAAMmE,GAASV,IACfL,IACAQ,EAAeH,EAAO,EAAG,GAAG,KACpBO,EAAKW,OAAO3E,KAAOyD,IACnBO,EAAKW,OAAO3E,GAAK,SAGzBuD,QAKRS,EAAKP,MAAMvD,EAAE,GAEjBuD,EAAMH,IACNE,EAAcC,EAAO,GACrBA,EAAMmB,EAAEZ,EAAKa,QAASb,EAAKxE,QAC3BkF,GAAc,GAElBV,EAAKP,MAAQA,EACTO,EAAKW,SACLX,EAAKW,OAAOR,GAASV,GACrBiB,GACAvC,IAGR,IAv3CgBvB,EAu3CDmD,IAt3CkB,iBAAVnD,GAA4C,mBAAfA,EAAMkE,KAs3CjC,CACrB,MAAMlG,EAAoBwC,IAc1B,GAbA2C,EAAQe,MAAKlE,IACTM,EAAsBtC,GACtByD,EAAO2B,EAAKc,KAAM,EAAGd,EAAKpD,MAAOA,GACjCM,EAAsB,SACvB6D,IAIC,GAHA7D,EAAsBtC,GACtByD,EAAO2B,EAAKgB,MAAO,EAAGhB,EAAKe,MAAOA,GAClC7D,EAAsB,OACjB8C,EAAKiB,SACN,MAAMF,KAIVf,EAAKS,UAAYT,EAAKkB,QAEtB,OADA7C,EAAO2B,EAAKkB,QAAS,IACd,MAGV,CACD,GAAIlB,EAAKS,UAAYT,EAAKc,KAEtB,OADAzC,EAAO2B,EAAKc,KAAM,EAAGd,EAAKpD,MAAOmD,IAC1B,EAEXC,EAAKK,SAAWN,EAh5CxB,IAAoBnD,EAqvDpB,SAASuE,EAAiB1B,GACtBA,GAASA,EAAMH,IAKnB,SAAS8B,EAAgBjE,EAAW/B,EAAQI,EAAQ6F,GAChD,MAAMzC,SAAEA,EAAQ0C,SAAEA,EAAQC,WAAEA,EAAUtC,aAAEA,GAAiB9B,EAAUmB,GACnEM,GAAYA,EAASgC,EAAExF,EAAQI,GAC1B6F,GAEDvD,GAAoB,KAChB,MAAM0D,EAAiBF,EAASG,IAAI3H,GAAK4H,OAAOpH,GAC5CiH,EACAA,EAAWxD,QAAQyD,GAKnBrH,EAAQqH,GAEZrE,EAAUmB,GAAGgD,SAAW,MAGhCrC,EAAa5E,QAAQyD,GAEzB,SAAS6D,EAAkBxE,EAAWpB,GAClC,MAAMuC,EAAKnB,EAAUmB,GACD,OAAhBA,EAAGM,WACHzE,EAAQmE,EAAGiD,YACXjD,EAAGM,UAAYN,EAAGM,SAAS1C,EAAEH,GAG7BuC,EAAGiD,WAAajD,EAAGM,SAAW,KAC9BN,EAAGU,IAAM,IAGjB,SAAS4C,EAAWzE,EAAWnB,IACI,IAA3BmB,EAAUmB,GAAGQ,MAAM,KACnBxB,EAAiBS,KAAKZ,GArzBrBU,IACDA,GAAmB,EACnBH,EAAiBoD,KAAK3C,IAqzBtBhB,EAAUmB,GAAGQ,MAAM+C,KAAK,IAE5B1E,EAAUmB,GAAGQ,MAAO9C,EAAI,GAAM,IAAO,GAAMA,EAAI,GAEnD,SAAS8F,EAAK3E,EAAW4E,EAASC,EAAUC,EAAiBC,EAAWC,EAAOC,EAAetD,EAAQ,EAAE,IACpG,MAAMuD,EAAmBzH,EACzBsC,EAAsBC,GACtB,MAAMmB,EAAKnB,EAAUmB,GAAK,CACtBM,SAAU,KACVI,IAAK,KAELmD,MAAAA,EACA9D,OAAQxE,EACRqI,UAAAA,EACAI,MAAOtI,IAEPsH,SAAU,GACVC,WAAY,GACZgB,cAAe,GACf1D,cAAe,GACfI,aAAc,GACduD,QAAS,IAAIC,IAAIV,EAAQS,UAAYH,EAAmBA,EAAiB/D,GAAGkE,QAAU,KAEtFE,UAAW1I,IACX8E,MAAAA,EACA6D,YAAY,EACZC,KAAMb,EAAQ3G,QAAUiH,EAAiB/D,GAAGsE,MAEhDR,GAAiBA,EAAc9D,EAAGsE,MAClC,IAAIC,GAAQ,EAkBZ,GAjBAvE,EAAGU,IAAMgD,EACHA,EAAS7E,EAAW4E,EAAQI,OAAS,IAAI,CAACnG,EAAG8G,KAAQC,KACnD,MAAMnG,EAAQmG,EAAK9G,OAAS8G,EAAK,GAAKD,EAOtC,OANIxE,EAAGU,KAAOkD,EAAU5D,EAAGU,IAAIhD,GAAIsC,EAAGU,IAAIhD,GAAKY,MACtC0B,EAAGqE,YAAcrE,EAAGgE,MAAMtG,IAC3BsC,EAAGgE,MAAMtG,GAAGY,GACZiG,GACAjB,EAAWzE,EAAWnB,IAEvB8G,KAET,GACNxE,EAAGD,SACHwE,GAAQ,EACR1I,EAAQmE,EAAGO,eAEXP,EAAGM,WAAWqD,GAAkBA,EAAgB3D,EAAGU,KAC/C+C,EAAQ3G,OAAQ,CAChB,GAAI2G,EAAQiB,QAAS,CAEjB,MAAMC,EA91ClB,SAAkB9G,GACd,OAAO+G,MAAMC,KAAKhH,EAAQiH,YA61CJC,CAAStB,EAAQ3G,QAE/BkD,EAAGM,UAAYN,EAAGM,SAAS0E,EAAEL,GAC7BA,EAAM5I,QAAQqB,QAId4C,EAAGM,UAAYN,EAAGM,SAASU,IAE3ByC,EAAQwB,OACR/D,EAAcrC,EAAUmB,GAAGM,UAC/BwC,EAAgBjE,EAAW4E,EAAQ3G,OAAQ2G,EAAQvG,OAAQuG,EAAQV,eAEnElD,IAEJjB,EAAsBmF,GAkD1B,MAAMmB,EACFC,WACI9B,EAAkB+B,KAAM,GACxBA,KAAKD,SAAW5J,EAEpB8J,IAAIzD,EAAM1B,GACN,MAAMkE,EAAagB,KAAKpF,GAAGoE,UAAUxC,KAAUwD,KAAKpF,GAAGoE,UAAUxC,GAAQ,IAEzE,OADAwC,EAAU3E,KAAKS,GACR,KACH,MAAM2B,EAAQuC,EAAUkB,QAAQpF,IACjB,IAAX2B,GACAuC,EAAUmB,OAAO1D,EAAO,IAGpC2D,KAAKC,GA73DT,IAAkBC,EA83DNN,KAAKO,QA93DCD,EA83DkBD,EA73DG,IAA5B9J,OAAOiK,KAAKF,GAAK/H,UA83DhByH,KAAKpF,GAAGqE,YAAa,EACrBe,KAAKO,MAAMF,GACXL,KAAKpF,GAAGqE,YAAa,6KCt5D9BpH,EAAmDH,EAAA+I,EAAA3I,wGAZpC,MAAXwD,EAAI,GAACoF,KAAU,EAEC,QAAXpF,EAAI,GAACoF,KAAY,EAEN,UAAXpF,EAAI,GAACoF,KAAc,EAER,KAAXpF,EAAI,GAACoF,KAAS,EAEH,KAAXpF,EAAI,GAACoF,KAAS,sWAVfpF,EAAI,GAAA,yCAAZzD,EAAmBH,EAAA+I,EAAA3I,8BAAXwD,EAAI,GAAA,KAAAhC,EAAAqH,EAAAC,0DAWSC,EAAA,IAAAC,GAAA,CAAArC,MAAA,CAAA9F,KAAA2C,KAAKyF,gDAA3BlJ,EAAsCH,EAAAsJ,EAAAlJ,uCAAhB,EAAAsD,IAAA6F,EAAAtI,KAAA2C,KAAKyF,sIAFoBF,EAAA,IAAAC,GAAA,CAAArC,MAAA,CAAA9F,KAAA2C,KAAKyF,gFAApDlJ,EAAkEH,EAAA+I,EAAA3I,uCAAnB,EAAAsD,IAAA6F,EAAAtI,KAAA2C,KAAKyF,sIAFTF,EAAA,IAAAC,GAAA,CAAArC,MAAA,CAAA9F,KAAA2C,KAAKyF,4EAAhDlJ,EAA8DH,EAAA+I,EAAA3I,uCAAnB,EAAAsD,IAAA6F,EAAAtI,KAAA2C,KAAKyF,sIAFMF,EAAA,IAAAC,GAAA,CAAArC,MAAA,CAAA9F,KAAA2C,KAAKyF,uFAA3DlJ,EAAyEH,EAAA+I,EAAA3I,uCAAnB,EAAAsD,IAAA6F,EAAAtI,KAAA2C,KAAKyF,sIAFTF,EAAA,IAAAC,GAAA,CAAArC,MAAA,CAAA9F,KAAA2C,KAAKyF,mFAAvDlJ,EAAqEH,EAAA+I,EAAA3I,uCAAnB,EAAAsD,IAAA6F,EAAAtI,KAAA2C,KAAKyF,uKAJ3C,MAAM,iBAANzF,KAAc,OAEJuB,IAAZvB,EAAI,GAACoF,KAAgB,iUAHzBpF,EAAI,wBAAT/C,OAAID,GAAA,iIADPT,EAsBMH,EAAA+I,EAAA3I,iFArBEwD,EAAI,WAAT/C,OAAID,GAAA,EAAA,0GAAJC,OAAID,EAAA4I,EAAA3I,OAAAD,GAAA,yCAAJC,OAAID,GAAA,sIAJKK,GAAI0H,wJCIAQ,EAAA,IAAAC,GAAA,CAAArC,MAAA,CAAA9F,KAAA2C,KAAK6F,uEAAL,EAAA/F,IAAA6F,EAAAtI,KAAA2C,KAAK6F,0HAHTxI,GAAI0H,wOCSmB/E,EAAI,8CAArCzD,EAA4CH,EAAA0J,EAAAtJ,oDAAXwD,EAAI,qIAD9BA,EAAO,wBAAZ/C,OAAID,GAAA,2TAJRT,EASSH,EAAA2J,EAAAvJ,GARRL,EAOI4J,EAAAC,GANJ7J,EAA0C6J,EAAAC,UAC1C9J,EAII6J,EAAAE,iFAHIlG,EAAO,WAAZ/C,OAAID,GAAA,EAAA,2GAAJC,OAAID,EAAA4I,EAAA3I,OAAAD,GAAA,yCAAJC,OAAID,GAAA,yIAPImJ,GAAOpB,0JCCZO,EAAAtF,KAAS,GAAA,yCAAhBzD,EAAyBH,EAAA+I,EAAA3I,oBAAlB,EAAAsD,GAAAwF,KAAAA,EAAAtF,KAAS,GAAA,KAAAhC,EAAAqH,EAAAC,uDAHJjI,GAAI0H,gLCIgB/E,EAAI,6CAApCzD,EAA2CH,EAAA2D,EAAAvD,sDAAXwD,EAAI,gIAHxB3C,GAAI0H,oKCMgB5B,MAAA,CAAA9F,KAAA2C,KAAW3C,+DADtB2C,EAAe,YAApCzD,EAEKH,EAAA4J,EAAAxJ,yCAD2B,EAAAsD,IAAAsG,EAAA/I,KAAA2C,KAAW3C,wIAN/BgJ,GAAUtB,EAEjBuB,EAAkC,QAAjBD,EAAWnF,KAAa,4CAA4C,sVCOvF3E,EAA0DH,EAAA+I,EAAA3I,gDAF/B8I,EAAAtF,KAAUuG,MAAK,8BAAhC7I,EAAAjC,EAAA,OAAA+K,EAAAxG,KAAUjE,aAApBQ,EAA8CH,EAAAX,EAAAe,kBAAnB,EAAAsD,GAAAwF,KAAAA,EAAAtF,KAAUuG,MAAK,KAAAvI,EAAAqH,EAAAC,GAAhC,EAAAxF,GAAA0G,KAAAA,EAAAxG,KAAUjE,iFADE,QAAjBiE,EAAS,GAACkB,KAAYuF,iEAD5BlK,EAMIH,EAAA0J,EAAAtJ,0IAPGwD,EAAU,wBAAf/C,OAAID,GAAA,0KAFRT,EAYKH,EAAAsK,EAAAlK,GAXJL,EAUMuK,EAAAC,4EATE3G,EAAU,WAAf/C,OAAID,GAAA,EAAA,mHAAJC,yEAJQ2J,GAAU7B,wNCeYlJ,EAAAgL,EAAAC,IAAAC,EAAA,mBAAA/G,KAAM8G,MAAGpJ,EAAAmJ,EAAA,MAAAE,+CAFxCxK,EAIIH,EAAA4J,EAAAxJ,GAHJL,EAEM6J,EAAAgB,GADL7K,EAAyC6K,EAAAH,WAAX,EAAA/G,IAAAjE,EAAAgL,EAAAC,IAAAC,EAAA,mBAAA/G,KAAM8G,6FANVjL,EAAAoL,EAAAH,IAAAI,EAAA,mBAAAlH,KAAM8G,MAAGpJ,EAAAuJ,EAAA,MAAAC,yGADrC3K,EAEKH,EAAA4J,EAAAxJ,GADJL,EAA4F6J,EAAAiB,WAAjE,EAAAnH,IAAAjE,EAAAoL,EAAAH,IAAAI,EAAA,mBAAAlH,KAAM8G,uJALkDjL,EAAAsL,EAAAL,IAAAM,EAAA,iCAAApH,KAAMqH,UAAO3J,EAAAyJ,EAAA,MAAAC,yNADlG7K,EAEKH,EAAA4J,EAAAxJ,GADLL,EAA2Q6J,EAAAmB,WAAtL,EAAArH,IAAAjE,EAAAsL,EAAAL,IAAAM,EAAA,iCAAApH,KAAMqH,kFAF1E,WAAZrH,EAAK,GAACkB,KAAeuF,GAKJ,SAAZzG,EAAK,GAACkB,KAAaoG,GAKL,SAAZtH,EAAK,GAACkB,KAAaqG,6OAbpBC,GAAKzC,6JCgBAyC,EAAA,IAAAC,GAAA,CAAAtE,MAAA,CAAAqE,MAAAxH,KAAKwH,qEADtBjL,EAEKH,EAAA4J,EAAAxJ,uCADY,EAAAsD,IAAA4H,EAAAF,MAAAxH,KAAKwH,iJAMKrE,MAAA,CAAAkD,WAAArG,KAAKqG,0EADhC9J,EAEKH,EAAA4J,EAAAxJ,uCADsB,EAAAsD,IAAA6H,EAAAtB,WAAArG,KAAKqG,sJAMLlD,MAAA,CAAAyD,WAAA5G,KAAK4G,0EADhCrK,EAEKH,EAAA4J,EAAAxJ,uCADsB,EAAAsD,IAAA8H,EAAAhB,WAAA5G,KAAK4G,+IAlBjBiB,EAAA,IAAAC,GAAA,CAAA3E,MAAA,CAAA9F,KAAA2C,KAAK3C,mBAIFkE,IAAbvB,EAAI,GAACwH,OAAiBD,GAAAvH,UAMJuB,IAAlBvB,EAAI,GAACqG,YAAsBiB,GAAAtH,UAMTuB,IAAlBvB,EAAI,GAAC4G,YAAsBH,GAAAzG,kKAnBhCzD,EAyBSH,EAAA2J,EAAAvJ,GAxBRL,EAII4J,EAAAW,GAHHvK,EAEKuK,EAAAC,2GADQ,EAAA7G,IAAAiI,EAAA1K,KAAA2C,KAAK3C,qBAIFkE,IAAbvB,EAAI,GAACwH,yGAMajG,IAAlBvB,EAAI,GAACqG,8GAMa9E,IAAlBvB,EAAI,GAAC4G,uRArBEoB,GAAIjD,sNCoBkGkD,EAAA,IAAAC,GAAA,CAAA/E,MAAA,CAAA9F,KAAA2C,KAAOmI,4GVgYzH,IAAgB9L,EAAM+L,EAAOC,EAAStF,EUhYrCxG,EAAwIH,EAAAkM,EAAA9L,wBVgYnH4L,UAAOC,aUhYsC/M,EAAA0E,EAAc,GAAAA,EAAd,MAAAA,KAAcA,EAAM,IAAAuI,MAAA7D,KAAA8D,aVgYvEnM,KACPoM,iBAAiBL,EAAOC,EAAStF,KAC/B,IAAM1G,EAAKqM,oBAAoBN,EAAOC,EAAStF,gCUlYwD,EAAAjD,IAAA6I,EAAAtL,KAAA2C,KAAOmI,wKAM5FnI,EAAO,yFADUA,EAAqB,GAAA,0BAAnEzD,EAEKH,EAAA4J,EAAAxJ,oDADwBwD,EAAO,mEADUA,EAAqB,GAAA,4KAVyBmD,MAAA,CAAA9F,KAAA2C,KAAK4I,YAIzF,IAAAC,EAAA7I,KAAK+C,6BAAV9F,OAAID,GAAA,8DAKF,IAAA8L,EAAU,OAAV9I,MAAcyG,GAAAzG,mWAXnBzD,EAgBKH,EAAA2M,EAAAvM,GAfLL,EAEK4M,EAAApC,GADHxK,EAA6GwK,EAAA5G,GAAxF5D,EAAwC4D,EAAAoF,6BAE/DhJ,EAMK4M,EAAAC,GALJ7M,EAIK6M,EAAAtC,iGAPsF,EAAA5G,IAAAsG,EAAA/I,KAAA2C,KAAK4I,mCAIzFC,EAAA7I,KAAK+C,gBAAV9F,OAAID,GAAA,EAAA,2GAAJC,OAAID,EAAA4I,EAAA3I,OAAAD,GAAA,WAKQ,OAAVgD,sJALF/C,OAAID,GAAA,iLAtBKiM,GAAIlE,EAEXmE,EAAU,KACVC,EAAwB,wDAEPC,IACjBC,QAAQC,IAAI,eACZJ,EAAUE,EAAOF,SAEdE,EAAOG,QACTC,EAAA,EAAAL,EAAwB,oBAExBK,EAAA,EAAAL,EAAwB,gNCL5B5M,EAAqDH,EAAA+I,EAAA3I,mFAF9BwD,EAAI,kFAAJA,EAAI,sKADN,mBAAhBA,EAAI,GAACyJ,UAA4B,iGAFxClN,EAQSH,EAAA2J,EAAAvJ,GAPRL,EAMK4J,EAAAC,gQATMiD,GAAIlE,sOCgBH/E,EAAI,kFAAJA,EAAI,kJAGFA,EAAI,kFAAJA,EAAI,yHAJD,QAAXA,EAAI,GAACkB,MAAYoG,GAAAtH,KAGN,QAAXA,EAAI,GAACkB,MAAYuF,GAAAzG,+GAJvBzD,EAOUH,EAAA2J,EAAAvJ,qDANO,QAAXwD,EAAI,GAACkB,mGAGM,QAAXlB,EAAI,GAACkB,4NARiB+G,EAAA,IAAAC,GAAA,CAAA/E,MAAA,CAAA9F,KAAA2C,KAAOuG,SAG5B,IAAAsC,EAAA7I,KAAO0J,2BAAZzM,OAAID,GAAA,+EAWamG,MAAA,CAAAgD,QAAAnG,KAAOmG,iSAf3B5J,EAkBSH,EAAAuN,EAAAnN,GAjBRL,EAA+CwN,EAAAC,sBAE/CzN,EAcQwN,EAAAE,qDAHP1N,EAEO0N,EAAAC,4CAfoB,EAAAhK,IAAA6I,EAAAtL,KAAA2C,KAAOuG,gCAG5BsC,EAAA7I,KAAO0J,cAAZzM,OAAID,GAAA,EAAA,wGAAJC,OAAID,EAAA4I,EAAA3I,OAAAD,GAAA,sBAWa,EAAA8C,IAAAiK,EAAA5D,QAAAnG,KAAOmG,mEAXxBlJ,OAAID,GAAA,2MARKgN,GAAMjF,8OCIC/E,EAAM,6KAJIiI,EAAA,IAAAC,GAAA,CAAA/E,MAAA,CAAA9F,KAAA2C,KAAOuG,SAG3B,IAAAsC,EAAA7I,KAAOiK,6BAAZhN,OAAID,GAAA,uIAFH,yCAAegD,EAAM,yHAF1BzD,EAQSH,EAAA2J,EAAAvJ,GAPRL,EAA+C4J,EAAAE,sBAC/C9J,EAAqC4J,EAAAmE,UAAzB/N,EAAqB+N,EAAAC,UACjChO,EAII4J,EAAAC,+EAHI6C,EAAA7I,KAAOiK,gBAAZhN,OAAID,GAAA,EAAA,2GAAJC,OAAID,EAAA4I,EAAA3I,OAAAD,GAAA,4DAAJC,OAAID,GAAA,4KAPIoN,GAAkBrF,GACxBsF,OAAAA,EAAOC,MAAMzD,OAAAA,IAASuD,qaC2C1B7N,EAAwBH,EAAA2D,EAAAvD,oEAflBwD,EAAO,wBAAZ/C,OAAID,GAAA,oEAOCgD,EAAa,wBAAlB/C,OAAID,GAAA,gTAPCgD,EAAO,WAAZ/C,OAAID,GAAA,EAAA,mHAAJC,OAAID,EAAAuN,EAAAtN,OAAAD,GAAA,+BAOCgD,EAAa,WAAlB/C,OAAID,GAAA,EAAA,mHAAJC,OAAID,EAAA4I,EAAA3I,OAAAD,GAAA,yCAPJC,OAAID,GAAA,0BAOJC,OAAID,GAAA,yPALyBgD,EAAM,kFADrCzD,EAGKH,EAAA4J,EAAAxJ,sBADJL,EAAI6J,EAAAwE,4KAM0BxK,EAAY,wFAD3CzD,EAGKH,EAAA4J,EAAAxJ,sBADJL,EAAI6J,EAAAwE,qLAZLjO,EAAgBH,EAAA2D,EAAAvD,6KADRwD,EAAY,KAAAgB,0LAHrBzE,EAwBSH,EAAA2J,EAAAvJ,GAvBRL,EAsBK4J,EAAAC,GArBH7J,EAAoD6J,EAAAyE,iFd83CvD,SAAmCzJ,EAAMhB,EAAKF,GAC1C,MAAMwB,EAAYtB,EAAIwB,SAChBH,SAAEA,GAAaL,EACjBA,EAAKS,UAAYT,EAAKc,OACtBR,EAAUN,EAAKpD,OAASyD,GAExBL,EAAKS,UAAYT,EAAKgB,QACtBV,EAAUN,EAAKe,OAASV,GAE5BL,EAAKP,MAAMV,EAAEuB,EAAWxB,8Jc/5CT4K,UACX,MAAAC,cAAwBC,MAAM,uBAAuBC,WAEvDC,EAAO,aAEAC,KAAWJ,EAAIK,SAAQ,CAC3B,MAAAC,cAA2BL,MAAmB,aAAAG,MAAYF,OAChEC,EAAUA,EAAQI,OAAOD,OAGtBE,EAAa,aAENJ,KAAWJ,EAAIS,QAAO,CAC1B,MAAAC,cAA0BT,MAAmB,aAAAG,MAAYF,OAC/DM,EAAgBA,EAAcD,OAAOG,GAG9B,MAAA,CAAAP,QAAAA,EAAQK,cAAAA,YCrBN,kEAAQ,CAChB/O,OAAQJ,SAASsP"}